buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

allprojects {
	group 'io.gitlab.arturbosch'
	version '0.1.0'

	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url "http://dl.bintray.com/arturbosch/code-analysis" }
	}

	apply plugin: 'kotlin'
	apply plugin: 'java'
	apply plugin: 'idea'

	if (project.name.endsWith("parser")) {
		apply plugin: 'antlr'
	}

	configurations {
		kotlin
		kotlinTest
	}

	dependencies {
		kotlin "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
		kotlin "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
		kotlinTest "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
		kotlinTest "com.natpryce:hamkrest:$hamkrestVersion"
		kotlinTest "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
		kotlinTest 'junit:junit:4.12'
	}

}

configurations {
	detekt
	compile.extendsFrom kotlin
	testCompile.extendsFrom kotlinTest
}

dependencies {
	detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.0.0.M7.b1'
	detekt 'io.gitlab.arturbosch.detekt:detekt-formatting:1.0.0.M7.b1'
}

task detekt(type: JavaExec) {
	main = "io.gitlab.arturbosch.detekt.cli.Main"
	classpath = configurations.detekt
	def input = "$project.projectDir.absolutePath"
	def config = "$project.projectDir/detekt.yml"
	def filters = ".*test.*"
	def rulesets = ""
	def params = ['-p', input, '-c', config, '-f', filters, '-r', rulesets]
	args(params)
}

tasks.findByName('build').mustRunAfter ':grovlin-parser:generateGrammarSource'